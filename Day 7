1) Minimum Size Subarray Sum
class Solution:
    def minSubArrayLen(self, target: int, nums: List[int]) -> int:
        l , r , sum = 0,0,0
        res = float("inf")
        while r < len(nums):
            sum += nums[r]
            while sum >= target:
                res = min(res , r-l+1)
                sum -=nums[l] 
                l += 1
            r += 1
        return 0 if res == float("inf") else res

2) Longest Substring Without Repeating Characters
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        n = len(s)
        maxLength = 0
        charSet = set()
        left = 0
        for right in range(n):
            if s[right] not in charSet:
                charSet.add(s[right])
                maxLength = max(maxLength, right - left + 1)
            else:
                while s[right] in charSet:
                    charSet.remove(s[left])
                    left += 1
                charSet.add(s[right])        
        return maxLength

3) Ransom Note
class Solution:
    def canConstruct(self, ransomNote: str, magazine: str) -> bool:
        a = set(ransomNote) 
        for i in a:
            if magazine.count(i)<ransomNote.count(i):
              return(False)
              break
        else:
            return(True)
            
4) Isomorphic Strings
class Solution:
    def isIsomorphic(self, s: str, t: str) -> bool:
        m1 , m2 = [],[]
        for i in range(len(s)):
            m1.append(s.index(s[i]))
            m2.append(t.index(t[i]))
        return True if m1==m2 else False
