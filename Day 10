1) Game of Life
class Solution:
    def gameOfLife(self, board: List[List[int]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        def withinbounds(a, b):
            if (a>=0 and a<=len(board)-1) and (b>=0 and b<=len(board[0])-1):
                return True
            return False
        def neighbours(i, j):
            n = []
            for a in range(-1, 2):
                for b in range(-1, 2):
                    if a == 0 and b == 0:
                        continue
                    if withinbounds(i+a, j+b):
                        n.append(board[i+a][j+b])
            return n
        aux = [[0 for i in range(len(board[0]))]for j in range(len(board))]
        for i in range(len(aux)):
            for j in range(len(aux[0])):
                n = sum(neighbours(i, j))
                aux[i][j] = n
        for i in range(len(board)):
            for j in range(len(board[0])):
                if board[i][j] == 1:
                    live = aux[i][j]
                    if live < 2 or live > 3:
                        board[i][j] = 0
                else:
                    live = aux[i][j]
                    if live == 3:
                        board[i][j] = 1

2) Summary Ranges
class Solution:
    def summaryRanges(self, nums: List[int]) -> List[str]:
        arr=[]
        nums.append(0)
        i=0
        while i<len(nums)-1:
            a=i
            j=i+1
            while nums[j]-nums[a]==1 and j<len(nums)-1:
                a+=1
                j+=1
            if j-i==1:
                arr.append(str(nums[i]))
            else:
                arr.append(str(nums[i])+"->"+str(nums[a]))
            i=j
        return arr
3) Merge Intervals
class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        intervals = sorted(intervals, key=lambda x: x [0])

        ans = []

        for interval in intervals:
            if not ans or ans[-1][1] < interval[0]:
                ans.append(interval)
            else:
                ans[-1][1] = max(ans[-1][1], interval[1])
        
        return ans
4) Insert Interval
class Solution:
    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:
        merged = []
        i = 0

        while i < len(intervals) and intervals[i][1] < newInterval[0]:
            merged.append(intervals[i])
            i += 1
        
        while i < len(intervals) and intervals[i][0] <= newInterval[1]:
            newInterval = [min(newInterval[0], intervals[i][0]), max(newInterval[1], intervals[i][1])]
            i += 1
        merged.append(newInterval)
        
        while i < len(intervals):
            merged.append(intervals[i])
            i += 1
        
        return merged
