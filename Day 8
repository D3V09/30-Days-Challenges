1) Group Anagrams
class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        dict = {} 
        for s in strs:
            so ="".join(sorted(s)) 
            if so not in dict:
                dict[so] = [s] 
            else:
                dict[so].append(s)
        return dict.values()
        
2) Two Sum
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        m = {}
        for i , n in enumerate(nums):
            diff = target - n
            if diff in m :
                return [m[diff] , i]
            m[n] = i
        return []

3) Longest Consecutive Sequence
class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:
        longest = 0
        num_set = set(nums)
        for n in num_set:
            if (n-1) not in num_set:
                length = 1
                while (n+length) in num_set:
                    length += 1
                longest = max(longest, length)
        return longest
        
4) Contains Duplicate II
class Solution:
    def containsNearbyDuplicate(self, nums: List[int], k: int) -> bool:
        hashmap = {}
        for i in range(len(nums)):
            if nums[i] in hashmap:
                if abs(hashmap[nums[i]] - i) <= k:
                    return True
            hashmap[nums[i]] = i
        return False
