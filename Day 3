1) Jump Game II
class Solution(object):
    def jump(self, nums):
        x = [nums[i]+i for i in range(len(nums))]  
        l,r,jumps = 0,0,0

        while r < len(nums)-1 :
            jumps += 1
            l,r = r+1,max(x[l:r+1]) 

        return jumps
             
2) H-Index
class Solution(object):
    def hIndex(self, citations):
        citations.sort(reverse=True)
        return self.bs(citations, 0, len(citations) - 1)
    
    def bs(self, nums, left, right):
        if left >= right:
            if nums[left] >= left + 1:
                return left + 1
            else:
                i = left - 1
                while i >= 0:
                    if nums[i] >= i + 1:
                        return i + 1
                    i -= 1
                return 0
        mid = left + (right - left) // 2
        index = mid + 1
        if nums[mid] == index:
            return index
        elif nums[mid] > index:
            return self.bs(nums, mid + 1, right)
        else:
            return self.bs(nums, left, mid -1)

3)Insert Delete GetRandom O(1)
import random

class RandomizedSet:

    def __init__(self):
        self.lst = []
        self.idx_map = {}

    def search(self, val):
        return val in self.idx_map

    def insert(self, val):
        if self.search(val):
            return False

        self.lst.append(val)
        self.idx_map[val] = len(self.lst) - 1
        return True

    def remove(self, val):
        if not self.search(val):
            return False

        idx = self.idx_map[val]
        self.lst[idx] = self.lst[-1]
        self.idx_map[self.lst[-1]] = idx
        self.lst.pop()
        del self.idx_map[val]
        return True

    def getRandom(self):
        return random.choice(self.lst)

4) Product of Array Except Self
class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        length=len(nums)
        sol=[1]*length
        pre = 1
        post = 1
        for i in range(length):
            sol[i] *= pre
            pre = pre*nums[i]
            sol[length-i-1] *= post
            post = post*nums[length-i-1]
        return(sol)
