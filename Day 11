1) Minimum Number of Arrows to Burst Balloons
class Solution:
    def findMinArrowShots(self, points: List[List[int]]) -> int:
        points.sort(key=lambda x: (x[0], x[1]))
        count = 0
        prevlast = points[0][1]

        for i in range(1, len(points)):
            if prevlast >= points[i][0]:
                if prevlast > points[i][1]:
                    prevlast = points[i][1]
            else:
                prevlast = points[i][1]
                count += 1

        return count + 1

2)Valid Parentheses
class Solution:
    def isValid(self, s: str) -> bool:

        while 1:
            if s.__contains__("()"):
                s = s.replace("()","")
            elif s.__contains__("{}"):
                s = s.replace("{}","")
            elif s.__contains__("[]"):
                s = s.replace("[]","")

            else : return (len(s) == 0)

3) Simplify Path
class Solution:
    def simplifyPath(self, path):
        dirOrFiles = []
        path = path.split("/")
        for elem in path:
            if dirOrFiles and elem == "..":
                dirOrFiles.pop()
            elif elem not in [".", "", ".."]:
                dirOrFiles.append(elem)
                
        return "/" + "/".join(dirOrFiles)

4) Min Stack
class MinStack:

    def __init__(self):
        self.stack = []
        self.minStack = []

    def push(self, val: int) -> None:
        self.stack.append(val)
        if self.minStack:
            val = min(self.minStack[-1],val)
        self.minStack.append(val)

    def pop(self) -> None:
        self.stack.pop()
        self.minStack.pop()

    def top(self) -> int:
        return self.stack[-1]

    def getMin(self) -> int:
        return self.minStack[-1]
